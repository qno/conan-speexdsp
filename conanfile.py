from conans import ConanFile, CMake, AutoToolsBuildEnvironment, tools
from conans.errors import ConanInvalidConfiguration
import os


class SpeexDSPConan(ConanFile):
    name = "SpeexDSP"
    version = "1.2rc3"
    license = "BSD"
    author = "Xiph.Org Foundation"
    url = "https://github.com/qno/conan-speexdsp"
    description = "SpeexDSP is a patent-free, Open Source/Free Software DSP library."

    settings = "os", "arch", "compiler", "build_type", "os_build", "arch_build"
    options = {"shared": [True, False]}
    default_options = "shared=False"
    generators = "cmake"

    _speexdsp_pkg_name = "speexdsp-1.2rc3"
    _speexdsp_libname = "speexdsp"

    def source(self):
        url = "http://downloads.xiph.org/releases/speex/{}.tar.gz".format(self._speexdsp_pkg_name)
        self.output.info("Downloading {}".format(url))
        tools.get(url)
        if self._isVisualStudioBuild():
            self._createCMakeLists()
            self._replace_speexdsp_config_types_h_in()


    def configure(self):
        if self._isVisualStudioBuild() and self.options.shared:
            raise ConanInvalidConfiguration("This library doesn't support dll's on Windows")

    def build(self):
        if self._isVisualStudioBuild():
            cmake = CMake(self)
            cmake.configure(source_dir=self._speexdsp_pkg_name)
            cmake.build()
        else:
            autotools = AutoToolsBuildEnvironment(self)
            autotools.configure(configure_dir=self._speexdsp_pkg_name)
            autotools.make()
            autotools.install()

    def package(self):
        self.copy("include/speex/*.h", dst=".", src=self._speexdsp_pkg_name)
        if self._isVisualStudioBuild():
            self.copy("win32/config.h", dst="include", src=self._speexdsp_pkg_name)
        self.copy("*.lib", dst="lib", keep_path=False)
        self.copy("*.dll", dst="lib", keep_path=False)
        self.copy("*.so", dst="lib", keep_path=False)
        self.copy("*.dylib", dst="lib", keep_path=False)
        self.copy("*.a", dst="lib", keep_path=False)

    def package_info(self):
        self.cpp_info.libs = [self._speexdsp_libname]
        if self._isVisualStudioBuild():
            # in include/win32 config.h is provided
            self.cpp_info.includedirs = ["include", "include/win32"]

    def _isVisualStudioBuild(self):
        return self.settings.os == "Windows" and self.settings.compiler == "Visual Studio"

    def _createCMakeLists(self):
        content = '''\
# THIS FILE WAS GENERATED BY CONAN. DO NOT EDIT THIS FILE!
cmake_minimum_required(VERSION 3.5)
project(SpeexDSP)

if (NOT MSVC)
  message(FATAL_ERROR "Abort proccessing - this CMake project has only support for MS Visual Studio!")
endif ()

include (CheckTypeSize)

check_type_size ("int16_t" INT16_T BUILTIN_TYPES_ONLY LANGUAGE C)
check_type_size ("short" SHORT16 BUILTIN_TYPES_ONLY LANGUAGE C)
check_type_size ("int" INT16 BUILTIN_TYPES_ONLY LANGUAGE C)
if (HAVE_${{INT16_T}})
  set (SIZE16 "int16_t")
elseif (HAVE_${{SHORT16}})
  set (SIZE16 "short")
elseif (HAVE_${{INT16}})
  set (SIZE16 "int")
endif ()
if (NOT DEFINED ${{SIZE16}})
  message (WARNING "SIZE16 type check failed")
endif ()

check_type_size ("uint16_t" UINT16_T BUILTIN_TYPES_ONLY LANGUAGE C)
check_type_size ("u_int16_t" U_INT16_T BUILTIN_TYPES_ONLY LANGUAGE C)
check_type_size ("unsigned short" USHORT16 BUILTIN_TYPES_ONLY LANGUAGE C)
check_type_size ("unsigned int" UINT16 BUILTIN_TYPES_ONLY LANGUAGE C)
if (HAVE_${{UINT16_T}})
  set (USIZE16 "uint16_t")
elseif (HAVE_${{U_INT16_T}})
  set (USIZE16 "u_int16_t")
elseif (HAVE_${{USHORT16}})
  set (USIZE16 "unsigned short")
elseif (HAVE_${{UINT16}})
  set (USIZE16 "unsigned int")
endif ()
if (NOT DEFINED ${{USIZE16}})
  message (WARNING "USIZE16 type check failed")
endif ()

check_type_size ("int32_t" INT32_T BUILTIN_TYPES_ONLY LANGUAGE C)
check_type_size ("int" INT32 BUILTIN_TYPES_ONLY LANGUAGE C)
check_type_size ("long" LONG BUILTIN_TYPES_ONLY LANGUAGE C)
check_type_size ("short" SHORT32 BUILTIN_TYPES_ONLY LANGUAGE C)
if (HAVE_${{INT32_T}})
  set (SIZE32 "int32_t")
elseif (HAVE_${{INT32}})
  set (SIZE32 "int")
elseif (HAVE_${{LONG}})
  set (SIZE32 "long")
elseif (HAVE_${{SHORT32}})
  set (SIZE32 "short")
endif ()
if (NOT DEFINED ${{SIZE32}})
  message (WARNING "SIZE32 type check failed")
endif ()

check_type_size ("uint32_t" UINT32_T BUILTIN_TYPES_ONLY LANGUAGE C)
check_type_size ("u_int32_t" U_INT32_T BUILTIN_TYPES_ONLY LANGUAGE C)
check_type_size ("unsigned short" USHORT32 BUILTIN_TYPES_ONLY LANGUAGE C)
check_type_size ("unsigned int" UINT32 BUILTIN_TYPES_ONLY LANGUAGE C)
check_type_size ("unsigned long" ULONG BUILTIN_TYPES_ONLY LANGUAGE C)
if (HAVE_${{UINT32_T}})
  set (USIZE32 "uint32_t")
elseif (HAVE_${{U_INT32_T}})
  set (USIZE32 "u_int32_t")
elseif (HAVE_${{USHORT32}})
  set (USIZE32 "unsigned short")
elseif (HAVE_${{UINT32}})
  set (USIZE32 "unsigned int")
elseif (HAVE_${{ULONG}})
  set (USIZE32 "unsigned long")
endif ()
if (NOT DEFINED ${{USIZE32}})
  message (WARNING "USIZE32 type check failed")
endif ()

configure_file(include/speex/speexdsp_config_types.h.in include/speex/speexdsp_config_types.h @ONLY)

check_type_size ("bogus" XXX BUILTIN_TYPES_ONLY LANGUAGE C)
message (FATAL_ERROR "check bogus type val: ${{XXX}}")

include(${{CMAKE_BINARY_DIR}}/conanbuildinfo.cmake)
conan_basic_setup()
set(LIBSPEEXDSP "{}")

set(SOURCES libspeexdsp/buffer.c
            libspeexdsp/fftwrap.c
            libspeexdsp/filterbank.c
            libspeexdsp/jitter.c
            libspeexdsp/kiss_fft.c
            libspeexdsp/kiss_fftr.c
            libspeexdsp/mdf.c
            libspeexdsp/preprocess.c
            libspeexdsp/resample.c
            libspeexdsp/scal.c
            libspeexdsp/smallft.c)
add_library(${{LIBSPEEXDSP}} ${{SOURCES}})
target_include_directories(${{LIBSPEEXDSP}} PRIVATE include libspeexdsp win32 ${CMAKE_CURRENT_BINARY_DIR}/include)
target_compile_definitions(${{LIBSPEEXDSP}} PRIVATE D_LIB HAVE_CONFIG_H)
'''.format(self._speexdsp_libname)

        self.output.info("create CMakeLists.txt file")
        cmake_file = os.path.join(self._speexdsp_pkg_name, "CMakeLists.txt")
        f = open(cmake_file, "w+")
        f.write(content)
        f.close()

    def _replace_speexdsp_config_types_h_in(self):
        content = '''\
#ifndef __SPEEX_TYPES_H__
#define __SPEEX_TYPES_H__

#if defined HAVE_STDINT_H
#  include <stdint.h>
#elif defined HAVE_INTTYPES_H
#  include <inttypes.h>
#elif defined HAVE_SYS_TYPES_H
#  include <sys/types.h>
#endif

#cmakedefine typedef @SIZE16@ spx_int16_t;
#cmakedefine typedef @USIZE16@ spx_uint16_t;
#cmakedefine typedef @SIZE32@ spx_int32_t;
#cmakedefine typedef @USIZE32@ spx_uint32_t;

#endif
'''

        self.output.info("translate speexdsp_config_types.h.in file for cmake configure_file")
        cmake_file = os.path.join(self._speexdsp_pkg_name, "include", "speex", "speexdsp_config_types.h.in")
        f = open(cmake_file, "w+")
        f.write(content)
        f.close()
